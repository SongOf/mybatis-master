<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace为dao接口的全限定类名-->
<mapper namespace="com.mybatis.dao.IUserDao">
    <resultMap id="userMap" type="com.mybatis.domain.User">
        <!--主键字段的对应-->
        <id property="id" column="id"></id>
        <!--非主键字段的对应-->
        <result property="username" column="username"></result>
        <result property="birthday" column="birthday"></result>
        <result property="sex" column="sex"></result>
        <result property="address" column="address"></result>
    </resultMap>
    <sql id="defaultUser">
        select * from user ;
    </sql>
    <!--配置查询所有-->
    <!--id是dao接口的方法名-->
    <select id="findAll" resultMap="userMap">
        <include refid="defaultUser"></include>
    </select>
    <!--保存用户-->
    <insert id="saveUser" parameterType="com.mybatis.domain.User">
        <selectKey keyProperty="id" keyColumn="id" resultType="int" order="AFTER">
            select last_insert_id();
        </selectKey>
        insert into user(username,address,sex,birthday)values(#{username},#{address},#{sex},#{birthday});
    </insert>
    <!--更新用户-->
    <update id="updateUser" parameterType="com.mybatis.domain.User">
        update user set username=#{username},address=#{address},sex=#{sex},birthday=#{birthday} where id=#{id};
    </update>
    <!--删除用户-->
    <!--参数只有一个时，uid只是一个占位符 对应userId 占位符名称随意-->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from user where id=#{uid};
    </delete>
    <!--根据id查询用户-->
    <select id="findUserById" parameterType="INT" resultType="com.mybatis.domain.User">
        select * from user where id=#{uid};
    </select>
    <!--根据用户名查询用户-->
    <select id="findUserByName" parameterType="string" resultType="com.mybatis.domain.User">
        select * from user where username like #{uname}
    </select>
    <!--根据QueryVo的条件查询用户-->
    <select id="findUserByVo" parameterType="com.mybatis.domain.QueryVo" resultType="com.mybatis.domain.User">
        select * from user where username like #{user.username}
    </select>
    <!--根据条件查询-->
    <select id="findUserByCondition" parameterType="user" resultMap="userMap">
        select * from user
        <where>
            <if test="id !=null">
                and id = #{id}
            </if>
            <if test="username !=null">
                and username = #{username}
            </if>
            <if test="birthday !=null">
                and birthday = #{birthday}
            </if>
            <if test="sex !=null">
                and sex = #{sex}
            </if>
            <if test="address !=null">
                and address = #{address}
            </if>
        </where>
    </select>
    <!--根据queryVo中的id集合查询用户-->
    <select id="findUserInIds" resultMap="userMap" parameterType="queryvo">
        select * from user
        <where>
            <if test="ids != null and ids.size()>0">
                <foreach collection="ids" open="and id in (" close=")" item="uid" separator=",">
                    #{uid}
                </foreach>
            </if>
        </where>
    </select>
</mapper>